*** GCTTC: GnuCOBOL TUI (TEXT USER INTERFACE) TOOLS AND UTILITIES COLLECTON ***

Here you can find COBOL TUI TOOLS (GC01xxxxxx to GC98xxxxxx) and COBOL Utilities (GC99xxxxxx) 

Although the textual interfaces are now replaced by graphical interfaces, a good compiler 
must allow to develop complete applications in an easy way even with textual user interfaces.

For this GnuCOBOL needs to generate applications with those objects that allow a classically 
user interfaces friendly and in line with all other programming languages on windows and unix platform.

GCTTC is a collection of COBOL modules (sources) useful for this purpose.
GCTTC includes modules to manage classical TUI objects like: dropdown menus, 
multiple-choice Buttons, buttons of YES NO type, calendar for selecting a date, 
on-screen messages, boxes, selection with radio buttons, check boxes and so on.

All modules have been developed exclusively using GnuCOBOL (Pure COBOL no C wrappers).

The collection includes several modules, is expected to introduce more features  in the future. 
Anyone can add new objects / functions to the collection.

You will find COBOL programs that you can "CALL" from your source to manage dropdown menus, 
display box, buttons ... 
You can choose: position, size, colors, borders, shadows, titles, 3D effect ...

You'll find commented source files. Documentation of parameters are inside the copybooks.
I also have prepared some demo programs to demonstrate how to "call" the programs 
and some of other main effects.
I called those modules "GnuCOBOL TTC = TUI (TEXT USER INTERFACE) TOOLS COLLECTION"
The sources have been compiled with GnuCOBOL 2.0.

The programs are called GnnXXXXXX. 
Where nn = a code that identifies the function and xxxxx = a brief description of the function.
For each object there is a COBOL source and a COPY book in which there are 
all the execution parameters of the function and parameter to be returned to the caller.

I used the Arnold Trembley pack for Windows MinGW 
(download it,unpack it,and the compiler is ready to use!). 
I used OpendCOBOLIDE, another very very nice product that I reccomend.
The development of programs has been on a Windows 10 64bit machine.

Please, let me know if you have any suggestion to improve the functions.
Your suggestions will be very useful and welcome.

The collection is made by folllowing programs (I will upload other modules in the future)

GC01BOX.COB 
call it to display boxes on screen, you can specify back/fore colors, size, position, 
single/double/custom borders, 3D effect and so on. 
This function is mainly developed to be used by other following modules.

GC02BOXMEX.COB 
call it to display messages on screen, you can specify back/fore colors, size, position, 
single/double/custom borders, 3D effect and so on.

GC03YESNO.COB 
call it to display a BOX with a simple message and two big buttons YES & NO on screen, 
you can specify back/fore colors, size, position, and so on.

GC09BUTTONS.COB 
call it to display multiple buttons on screen, you can specify number of buttons, 
back/fore colors, size, position, text of buttons and so on.

GC21MENU.COB 
call it to display menus on screen, you can manage bar menu, dropdown menu, 
specify number of items, text and length of items, back/fore colors, position, 
messages associated to menu items, and so on.

GC51CALYEAR.COB
call it to display a one year calendar on screen.
User can browse days, months and years to pick-up a date.

GC56DATEPICKER.COB
call it to display a one month calendar (regular or small size)
you can specify starting date, back/fore colors, size, position, 
single/double/custom borders, 3D effect and so on.
User can browse days, months and years to pick-up a date.

GC58SAVERCLOCK.COB
call it to display a screen saver with a big clock and a scrolling string.
the big clock will move randomly on screen.
you can specify back/fore colors, size, position, single/double/custom borders, 
3D effect and so on.

GC99COPYGEN.COB
See at 
https://sourceforge.net/p/open-cobol/discussion/contrib/thread/e21eb9ba/#90fd

How to use it:
1. create a text file with the layout of the report. Set all constants and variables. 
Use the $ symbol when you want a PIC X field,use the # symbol when you want a PIC 9. 
For a better graphical representation of the report you can also insert 
blank lines or also rows repeated and identical to previous lines.
2. run the program GC99COPYGEN that reads the TXT file with the report layout 
and creates the corresponding Copy COBOL in a .CPY text file. 
The program will skip blank lines and will skip rows equals to each other, 
eg. with the same fields, produces a single line in the copy.
3. the Copy COBOL obtained should be used directly in the COBOL program 
that will produce the report, or you can change it before, 
to enhance the Copy COBOL example for a better the editing Picture 
of individual fields directly in the copy.
